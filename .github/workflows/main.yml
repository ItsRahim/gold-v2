name: Build, Test, and Scan with SonarQube

on:
  push:
    branches:
      - main
    paths:
      - 'rgts-config-server/**'
      - 'rgts-eureka-server/**'
      - 'rgts-common/**'
      - 'rgts-proto-service/**'
      - 'rgts-kafka-service/**'
      - 'rgts-pricing-service/**'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: [ "rgts-config-server", "rgts-eureka-server", "rgts-pricing-service" ]

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Build and Test
        run: mvn clean install -f ${{ matrix.folder }}/pom.xml

  code-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Set up JDK 21
        uses: actions/setup-java@v4.7.1
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: SonarQube Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ItsRahim_gold-v2 -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: code-scan
    strategy:
      matrix:
        folder: [ "rgts-config-server", "rgts-eureka-server", "rgts-pricing-service" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/${{ matrix.folder }}:latest
          docker build -f ${{ matrix.folder }}/Dockerfile -t $IMAGE_NAME .
          docker push $IMAGE_NAME

