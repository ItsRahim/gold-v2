services:
  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: gold
    ports:
      - "5432:5432"
    entrypoint: [ "/usr/local/bin/docker-entrypoint.sh", "postgres" ]
    networks:
      - my-network

  zookeeper:
    image: docker.io/bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - my-network

  kafka:
    image: docker.io/bitnami/kafka:latest
    ports:
      - "9093:9093"
    volumes:
      - kafka_data:/bitnami
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=EXTERNAL://0.0.0.0:9093,INTERNAL://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=EXTERNAL://localhost:9093,INTERNAL://kafka:9092
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_SECURITY_INTER_BROKER_PROTOCOL=PLAINTEXT
      - KAFKA_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - my-network

  redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    networks:
      - my-network

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - my-network

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - my-network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - my-network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - my-network

  mailpit:
    image: axllent/mailpit:latest
    container_name: mailpit
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - my-network

  python-api:
    image: ghcr.io/itsrahim/rgts-python-api:latest
    ports:
      - "8000:8000"
    environment:
      - DATABASE_NAME=gold
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - postgres
      - redis
      - kafka
    networks:
      - my-network

  eureka-server:
    image: ghcr.io/itsrahim/rgts-eureka-server:latest
    ports:
      - "8761:8761"
    environment:
      - SERVER_PORT=8761
      - EUREKA_HOSTNAME=eureka-server
    command: [ "java", "-jar", "/app/eureka-server.jar" ]
    networks:
      - my-network

  gateway-service:
    image: ghcr.io/itsrahim/rgts-gateway-service:latest
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - EUREKA_SERVER_DEFAULT_ZONE=http://eureka-server:8761/eureka
    depends_on:
      - eureka-server
    command: [ "java", "-jar", "/app/gateway-service.jar" ]
    networks:
      - my-network

  pricing-service:
    image: ghcr.io/itsrahim/rgts-pricing-service:latest
    ports:
      - "8081:8081"
    environment:
      - SERVER_PORT=8081
      - EUREKA_SERVER_DEFAULT_ZONE=http://eureka-server:8761/eureka
      - DATABASE_URL=jdbc:postgresql://postgres:5432/gold
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=password
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - KAFKA_BOOTSTRAP_SERVER=kafka:9092
    depends_on:
      - postgres
      - kafka
      - redis
      - eureka-server
    command: [ "java", "-jar", "/app/pricing-service.jar" ]
    networks:
      - my-network

networks:
  my-network:
    driver: bridge

volumes:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  minio_data:
    driver: local
